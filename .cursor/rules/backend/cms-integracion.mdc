---
description: 
globs: 
alwaysApply: true
---
# Regla: cms-integracion.mdc

## üéØ Prop√≥sito
Establecer un sistema de integraci√≥n con CMS Headless para gestionar el contenido del sitio web de forma eficiente, permitiendo separar la gesti√≥n de contenidos del desarrollo frontend, mientras se mantiene un rendimiento √≥ptimo con puntaje 100 en PageSpeed Insights a trav√©s de generaci√≥n est√°tica incremental, cach√©s optimizadas y estrategias avanzadas de fetching.

---

## üèóÔ∏è Arquitectura general del CMS

### 1. Modelo de integraci√≥n JAMstack

```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê     ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê     ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                 ‚îÇ     ‚îÇ                 ‚îÇ     ‚îÇ                 ‚îÇ
‚îÇ     CMS         ‚îÇ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ  Content API    ‚îÇ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ Next.js Frontend‚îÇ
‚îÇ   Headless      ‚îÇ     ‚îÇ   (GraphQL)     ‚îÇ     ‚îÇ    (Vercel)     ‚îÇ
‚îÇ                 ‚îÇ     ‚îÇ                 ‚îÇ     ‚îÇ                 ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò     ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò     ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
        ‚îÇ                                               ‚îÇ
        ‚îÇ                                               ‚îÇ
        ‚ñº                                               ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                           ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  Webhooks para  ‚îÇ                           ‚îÇ Cloudflare CDN  ‚îÇ
‚îÇ  Revalidaci√≥n   ‚îÇ                           ‚îÇ  Distribuci√≥n   ‚îÇ
‚îÇ                 ‚îÇ                           ‚îÇ                 ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                           ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

### 2. CMS soportados

| CMS | API | Uso Recomendado | Precio |
|-----|-----|-----------------|--------|
| Contentful | GraphQL/REST | Sitios empresariales, multiidioma | $$$ |
| Strapi | GraphQL/REST | Proyectos personalizados, autohospedado | Open Source |
| Sanity | GROQ | Sitios con layout flexible | $$ |
| Prismic | GraphQL/REST | Sitios marketing, landing pages | $$ |
| DatoCMS | GraphQL | Sitios multiidioma, im√°genes optimizadas | $$ |

---

## üîå Configuraci√≥n de conexi√≥n

### 1. Setup para Contentful (ejemplo principal)

```typescript
// lib/contentful.ts
import { createClient } from 'contentful';
import { cache } from 'react';
import type { TypePostSkeleton, TypePageSkeleton } from '@/types/contentful';

// Cliente para entorno de producci√≥n
const client = createClient({
  space: process.env.CONTENTFUL_SPACE_ID!,
  accessToken: process.env.CONTENTFUL_ACCESS_TOKEN!,
  environment: process.env.CONTENTFUL_ENVIRONMENT || 'master',
});

// Cliente para entorno de preview
const previewClient = createClient({
  space: process.env.CONTENTFUL_SPACE_ID!,
  accessToken: process.env.CONTENTFUL_PREVIEW_ACCESS_TOKEN!,
  environment: process.env.CONTENTFUL_ENVIRONMENT || 'master',
  host: 'preview.contentful.com',
});

// Seleccionar cliente seg√∫n modo
const getClient = (preview = false) => (preview ? previewClient : client);

// Funci√≥n para obtener un post, con cach√© de React para optimizaci√≥n
export const getPost = cache(async (slug: string, preview = false) => {
  try {
    const client = getClient(preview);
    const response = await client.getEntries<TypePostSkeleton>({
      content_type: 'post',
      'fields.slug': slug,
      include: 2, // Incluir recursos vinculados hasta 2 niveles
    });
    
    return response.items[0] || null;
  } catch (error) {
    console.error('Error fetching post:', error);
    return null;
  }
});

// Funci√≥n para obtener m√∫ltiples posts
export const getPosts = cache(async (
  limit = 10, 
  skip = 0, 
  preview = false,
  options = {}
) => {
  try {
    const client = getClient(preview);
    const response = await client.getEntries<TypePostSkeleton>({
      content_type: 'post',
      order: '-sys.createdAt',
      limit,
      skip,
      ...options,
    });
    
    return {
      posts: response.items,
      total: response.total,
      skip: response.skip,
      limit: response.limit,
    };
  } catch (error) {
    console.error('Error fetching posts:', error);
    return {
      posts: [],
      total: 0,
      skip: 0,
      limit,
    };
  }
});

// Funci√≥n para obtener todas las rutas disponibles (para generaci√≥n est√°tica)
export const getAllSlugs = cache(async (contentType: string) => {
  try {
    const response = await client.getEntries({
      content_type: contentType,
      select: 'fields.slug',
      limit: 1000,
    });
    
    return response.items.map((item) => item.fields.slug as string);
  } catch (error) {
    console.error(`Error fetching slugs for ${contentType}:`, error);
    return [];
  }
});
```

### 2. Configuraci√≥n GraphQL para Contentful

```typescript
// lib/contentful-graphql.ts
import { cache } from 'react';

// URL del endpoint GraphQL de Contentful
const API_URL = `https://graphql.contentful.com/content/v1/spaces/${process.env.CONTENTFUL_SPACE_ID}`;

// Cabeceras para la petici√≥n
const API_HEADERS = {
  'Content-Type': 'application/json',
  'Authorization': `Bearer ${process.env.CONTENTFUL_ACCESS_TOKEN}`,
};

// Cabeceras para previsualizaci√≥n
const PREVIEW_API_HEADERS = {
  'Content-Type': 'application/json',
  'Authorization': `Bearer ${process.env.CONTENTFUL_PREVIEW_ACCESS_TOKEN}`,
};

// Funci√≥n para realizar una consulta GraphQL
export const fetchGraphQL = cache(async (
  query: string, 
  variables = {}, 
  preview = false
) => {
  try {
    const headers = preview ? PREVIEW_API_HEADERS : API_HEADERS;
    const url = preview 
      ? `https://preview-graphql.contentful.com/content/v1/spaces/${process.env.CONTENTFUL_SPACE_ID}`
      : API_URL;
    
    const response = await fetch(url, {
      method: 'POST',
      headers,
      body: JSON.stringify({ query, variables }),
      next: { revalidate: 60 }, // Revalidar cach√© cada 60 segundos
    });
    
    const json = await response.json();
    
    if (json.errors) {
      console.error('GraphQL Errors:', json.errors);
      throw new Error('Failed to fetch API');
    }
    
    return json.data;
  } catch (error) {
    console.error('Error fetching GraphQL:', error);
    throw error;
  }
});

// Ejemplo de query para obtener un post por slug
export const getPostBySlugQuery = `
  query GetPostBySlug($slug: String!) {
    postCollection(where: { slug: $slug }, limit: 1) {
      items {
        title
        slug
        summary
        content {
          json
          links {
            assets {
              block {
                sys {
                  id
                }
                url
                title
                width
                height
                description
              }
            }
          }
        }
        featuredImage {
          url
          title
          width
          height
          description
        }
        author {
          name
          picture {
            url
          }
        }
        publishDate
        tags
      }
    }
  }
`;

// Funci√≥n para obtener un post usando GraphQL
export const getPostBySlug = cache(async (slug: string, preview = false) => {
  try {
    const data = await fetchGraphQL(getPostBySlugQuery, { slug }, preview);
    return data.postCollection.items[0] || null;
  } catch (error) {
    console.error('Error fetching post by slug:', error);
    return null;
  }
});
```

---

## üîÉ Generaci√≥n est√°tica incremental (ISR)

### 1. Implementaci√≥n en Next.js 14 (App Router)

```tsx
// app/(content)/blog/[slug]/page.tsx
import { Metadata } from 'next';
import { getPostBySlug, getAllSlugs } from '@/lib/contentful';
import { notFound } from 'next/navigation';
import PostBody from '@/components/post/PostBody';
import PostHeader from '@/components/post/PostHeader';

// Definir tiempo de revalidaci√≥n
export const revalidate = 3600; // Revalidar cada hora

// Generar rutas est√°ticas
export async function generateStaticParams() {
  const slugs = await getAllSlugs('post');
  
  return slugs.map(slug => ({
    slug,
  }));
}

// Generar metadatos para SEO
export async function generateMetadata({ 
  params 
}: { 
  params: { slug: string } 
}): Promise<Metadata> {
  const post = await getPostBySlug(params.slug);
  
  if (!post) {
    return {
      title: 'Post no encontrado',
      description: 'El art√≠culo que buscas no existe',
    };
  }
  
  return {
    title: post.fields.title,
    description: post.fields.summary,
    alternates: {
      canonical: `/blog/${post.fields.slug}`,
    },
    openGraph: {
      title: post.fields.title,
      description: post.fields.summary,
      type: 'article',
      publishedTime: post.fields.publishDate,
      authors: [post.fields.author?.fields.name],
      images: [
        {
          url: `https:${post.fields.featuredImage.fields.file.url}`,
          width: post.fields.featuredImage.fields.file.details.image.width,
          height: post.fields.featuredImage.fields.file.details.image.height,
          alt: post.fields.featuredImage.fields.title,
        },
      ],
    },
  };
}

// Componente de p√°gina
export default async function PostPage({ params }: { params: { slug: string } }) {
  const post = await getPostBySlug(params.slug);
  
  if (!post) {
    notFound();
  }
  
  return (
    <main className="container mx-auto px-4 py-10">
      <article className="prose prose-lg dark:prose-invert mx-auto">
        <PostHeader
          title={post.fields.title}
          coverImage={post.fields.featuredImage.fields.file.url}
          date={post.fields.publishDate}
          author={post.fields.author}
        />
        <PostBody content={post.fields.content} />
      </article>
    </main>
  );
}
```

### 2. Revalidaci√≥n bajo demanda (On-Demand)

```typescript
// app/api/revalidate/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { revalidatePath, revalidateTag } from 'next/cache';

// Funci√≥n para verificar el secreto
function verifySecret(secret: string | null) {
  if (!secret) return false;
  return secret === process.env.REVALIDATION_SECRET;
}

export async function POST(request: NextRequest) {
  try {
    // Leer el cuerpo de la solicitud
    const body = await request.json();
    
    // Verificar secreto para seguridad
    const secret = request.headers.get('x-secret-token');
    if (!verifySecret(secret)) {
      return NextResponse.json(
        { error: 'Invalid token' },
        { status: 401 }
      );
    }
    
    // Verificar tipo de contenido afectado
    const { contentType, slug, tags = [] } = body;
    
    if (!contentType) {
      return NextResponse.json(
        { error: 'Content type is required' },
        { status: 400 }
      );
    }
    
    // Revalidar rutas seg√∫n tipo
    if (contentType === 'post') {
      if (slug) {
        // Revalidar un post espec√≠fico
        revalidatePath(`/blog/${slug}`);
      } else {
        // Revalidar listado de posts
        revalidatePath('/blog');
      }
    } else if (contentType === 'page') {
      if (slug) {
        // Revalidar una p√°gina espec√≠fica
        revalidatePath(`/${slug}`);
      }
    }
    
    // Revalidar por tags
    if (tags.length > 0) {
      tags.forEach((tag: string) => {
        revalidateTag(tag);
      });
    }
    
    return NextResponse.json({ revalidated: true, now: Date.now() });
  } catch (error) {
    console.error('Revalidation error:', error);
    return NextResponse.json(
      { error: 'Error revalidating content' },
      { status: 500 }
    );
  }
}
```

---

## üñºÔ∏è Renderizado de contenido enriquecido

### 1. Renderizador para Contentful Rich Text

```tsx
// components/RichText.tsx
import { documentToReactComponents } from '@contentful/rich-text-react-renderer';
import { BLOCKS, INLINES, MARKS } from '@contentful/rich-text-types';
import Link from 'next/link';
import Image from 'next/image';
import { cn } from '@/lib/utils';

interface RichTextProps {
  content: any;
  className?: string;
}

export function RichText({ content, className }: RichTextProps) {
  if (!content) return null;
  
  // Mapeo de assets para optimizar im√°genes
  const assetMap = new Map();
  if (content.links?.assets?.block) {
    content.links.assets.block.forEach((asset: any) => {
      assetMap.set(asset.sys.id, asset);
    });
  }
  
  // Opciones de renderizado
  const options = {
    renderMark: {
      [MARKS.BOLD]: (text: React.ReactNode) => (
        <strong className="font-bold">{text}</strong>
      ),
      [MARKS.CODE]: (text: React.ReactNode) => (
        <code className="bg-neutral-100 dark:bg-neutral-800 rounded px-1 py-0.5 font-mono text-sm">{text}</code>
      ),
    },
    renderNode: {
      [BLOCKS.PARAGRAPH]: (node: any, children: React.ReactNode) => (
        <p className="mb-4 leading-relaxed">{children}</p>
      ),
      [BLOCKS.HEADING_2]: (node: any, children: React.ReactNode) => (
        <h2 className="text-2xl font-bold mt-8 mb-4">{children}</h2>
      ),
      [BLOCKS.HEADING_3]: (node: any, children: React.ReactNode) => (
        <h3 className="text-xl font-bold mt-6 mb-3">{children}</h3>
      ),
      [BLOCKS.UL_LIST]: (node: any, children: React.ReactNode) => (
        <ul className="list-disc list-inside mb-4">{children}</ul>
      ),
      [BLOCKS.OL_LIST]: (node: any, children: React.ReactNode) => (
        <ol className="list-decimal list-inside mb-4">{children}</ol>
      ),
      [BLOCKS.LIST_ITEM]: (node: any, children: React.ReactNode) => (
        <li className="mb-2">{children}</li>
      ),
      [BLOCKS.QUOTE]: (node: any, children: React.ReactNode) => (
        <blockquote className="border-l-4 border-primary pl-4 italic my-4">{children}</blockquote>
      ),
      [BLOCKS.HR]: () => <hr className="my-8 border-neutral-200 dark:border-neutral-700" />,
      [BLOCKS.EMBEDDED_ASSET]: (node: any) => {
        const asset = assetMap.get(node.data.target.sys.id);
        if (!asset) return null;
        
        return (
          <div className="my-6">
            <Image
              src={`https:${asset.url}`}
              alt={asset.description || asset.title}
              width={asset.width}
              height={asset.height}
              className="rounded-lg mx-auto"
              sizes="(max-width: 768px) 100vw, (max-width: 1200px) 80vw, 800px"
            />
            {asset.description && (
              <p className="text-center text-neutral-500 text-sm mt-2">
                {asset.description}
              </p>
            )}
          </div>
        );
      },
      [INLINES.HYPERLINK]: (node: any, children: React.ReactNode) => {
        const url = node.data.uri;
        const isInternal = url.startsWith('/') || url.startsWith('#');
        
        if (isInternal) {
          return (
            <Link href={url} className="text-primary hover:underline">
              {children}
            </Link>
          );
        }
        
        return (
          <a
            href={url}
            target="_blank"
            rel="noopener noreferrer"
            className="text-primary hover:underline"
          >
            {children}
          </a>
        );
      },
      [INLINES.ENTRY_HYPERLINK]: (node: any, children: React.ReactNode) => {
        // Aqu√≠ manejar√≠amos referencias a otras entradas de Contentful
        // Ejemplo: `/blog/${node.data.target.fields.slug}`
        return (
          <Link href="/" className="text-primary hover:underline">
            {children}
          </Link>
        );
      },
    },
  };
  
  return (
    <div className={cn('rich-text', className)}>
      {documentToReactComponents(content.json, options)}
    </div>
  );
}
```

### 2. Vista previa en tiempo real

```tsx
// app/api/preview/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { draftMode } from 'next/headers';

export async function GET(request: NextRequest) {
  // Datos requeridos para iniciar modo preview
  const { searchParams } = new URL(request.url);
  const secret = searchParams.get('secret');
  const slug = searchParams.get('slug');
  const contentType = searchParams.get('type') || 'post';
  
  // Validar secreto
  if (secret !== process.env.CONTENTFUL_PREVIEW_SECRET) {
    return NextResponse.json(
      { message: 'Invalid token' },
      { status: 401 }
    );
  }
  
  // Validar slug
  if (!slug) {
    return NextResponse.json(
      { message: 'Slug is required' },
      { status: 400 }
    );
  }
  
  // Habilitar modo borrador
  draftMode().enable();
  
  // Definir URL de redirecci√≥n seg√∫n tipo de contenido
  let redirectUrl = '/';
  if (contentType === 'post') {
    redirectUrl = `/blog/${slug}`;
  } else if (contentType === 'page') {
    redirectUrl = `/${slug}`;
  }
  
  // Redirigir a la URL apropiada
  return NextResponse.redirect(new URL(redirectUrl, request.url));
}

// Componente cliente para banner de preview
'use client';

import { useRouter } from 'next/navigation';
import { useEffect, useState } from 'react';

export function PreviewBanner() {
  const router = useRouter();
  const [isVisible, setIsVisible] = useState(true);
  
  const exitPreview = () => {
    fetch('/api/preview/exit')
      .then(() => {
        router.refresh();
      })
      .catch(console.error);
  };
  
  return isVisible ? (
    <div className="sticky top-0 z-50 bg-primary text-white px-4 py-2 text-center">
      <p className="flex items-center justify-center gap-2">
        <span>Modo de vista previa</span>
        <button
          onClick={exitPreview}
          className="bg-white text-primary px-2 py-1 rounded text-sm"
        >
          Salir
        </button>
        <button
          onClick={() => setIsVisible(false)}
          className="ml-2 p-1 hover:bg-primary-dark rounded"
          aria-label="Cerrar"
        >
          ‚úï
        </button>
      </p>
    </div>
  ) : null;
}
```

---

## üîé B√∫squeda y filtrado en CMS

### 1. API de b√∫squeda integrada

```typescript
// app/api/search/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { getPosts } from '@/lib/contentful';

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url);
  const query = searchParams.get('q') || '';
  const page = parseInt(searchParams.get('page') || '1', 10);
  const limit = parseInt(searchParams.get('limit') || '10', 10);
  
  // Validar par√°metros
  if (!query) {
    return NextResponse.json(
      { error: 'Query parameter is required' },
      { status: 400 }
    );
  }
  
  try {
    // Calcular offset para paginaci√≥n
    const skip = (page - 1) * limit;
    
    // Buscar posts que coincidan con la consulta
    const { posts, total } = await getPosts(limit, skip, false, {
      'query': query,
    });
    
    // Calcular metadatos de paginaci√≥n
    const totalPages = Math.ceil(total / limit);
    const hasMore = page < totalPages;
    
    // Formatear resultados para devolver solo los datos necesarios
    const results = posts.map(post => ({
      id: post.sys.id,
      title: post.fields.title,
      slug: post.fields.slug,
      summary: post.fields.summary,
      publishDate: post.fields.publishDate,
      // A√±adir URL a imagen destacada si existe
      coverImage: post.fields.featuredImage 
        ? `https:${post.fields.featuredImage.fields.file.url}`
        : null,
    }));
    
    return NextResponse.json({
      results,
      pagination: {
        total,
        page,
        limit,
        totalPages,
        hasMore,
      },
    }, {
      headers: {
        // Cache for 10 minutes, stale while revalidate for 1 hour
        'Cache-Control': 'public, max-age=600, stale-while-revalidate=3600',
      },
    });
  } catch (error) {
    console.error('Search error:', error);
    return NextResponse.json(
      { error: 'Failed to search content' },
      { status: 500 }
    );
  }
}
```

### 2. Componente de b√∫squeda optimizado

```tsx
// components/SearchBox.tsx
'use client';

import { useState, useEffect, useRef, useCallback } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { SearchIcon, XIcon } from '@heroicons/react/outline';
import { useDebounce } from '@/hooks/useDebounce';
import Link from 'next/link';

export function SearchBox() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [query, setQuery] = useState(searchParams.get('q') || '');
  const [results, setResults] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const inputRef = useRef<HTMLInputElement>(null);
  const resultsRef = useRef<HTMLDivElement>(null);
  
  // Debounce search to prevent excessive API calls
  const debouncedQuery = useDebounce(query, 300);
  
  // Fetch search results
  const fetchResults = useCallback(async () => {
    if (!debouncedQuery || debouncedQuery.length < 2) {
      setResults([]);
      return;
    }
    
    setIsLoading(true);
    
    try {
      const response = await fetch(`/api/search?q=${encodeURIComponent(debouncedQuery)}&limit=5`);
      const data = await response.json();
      setResults(data.results || []);
    } catch (error) {
      console.error('Search error:', error);
      setResults([]);
    } finally {
      setIsLoading(false);
    }
  }, [debouncedQuery]);
  
  // Update search when debounced query changes
  useEffect(() => {
    fetchResults();
  }, [debouncedQuery, fetchResults]);
  
  // Close dropdown when clicking outside
  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (
        resultsRef.current && 
        !resultsRef.current.contains(event.target as Node) &&
        !inputRef.current?.contains(event.target as Node)
      ) {
        setIsOpen(false);
      }
    }
    
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);
  
  // Handle search submission
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (query.trim()) {
      router.push(`/search?q=${encodeURIComponent(query)}`);
      setIsOpen(false);
    }
  };
  
  return (
    <div className="relative">
      <form onSubmit={handleSubmit} className="relative">
        <input
          ref={inputRef}
          type="text"
          value={query}
          onChange={(e) => {
            setQuery(e.target.value);
            setIsOpen(true);
          }}
          onFocus={() => setIsOpen(true)}
          placeholder="Buscar..."
          className="w-full py-2 pl-10 pr-4 rounded-full border border-neutral-300 dark:border-neutral-700 bg-white dark:bg-neutral-800 focus:outline-none focus:ring-2 focus:ring-primary"
          aria-label="Buscar contenido"
        />
        <span className="absolute left-3 top-2.5 text-neutral-400">
          <SearchIcon className="h-5 w-5" />
        </span>
        {query && (
          <button
            type="button"
            onClick={() => {
              setQuery('');
              inputRef.current?.focus();
            }}
            className="absolute right-3 top-2.5 text-neutral-400 hover:text-neutral-600 dark:hover:text-neutral-300"
            aria-label="Limpiar b√∫squeda"
          >
            <XIcon className="h-5 w-5" />
          </button>
        )}
      </form>
      
      {/* Dropdown de resultados */}
      {isOpen && (
        <div
          ref={resultsRef}
          className="absolute top-full left-0 right-0 mt-1 bg-white dark:bg-neutral-800 border border-neutral-200 dark:border-neutral-700 rounded-md shadow-lg z-10 max-h-80 overflow-y-auto"
        >
          {isLoading ? (
            <div className="p-4 text-center text-neutral-500">
              Buscando...
            </div>
          ) : results.length > 0 ? (
            <ul>
              {results.map((result) => (
                <li key={result.id} className="border-b border-neutral-200 dark:border-neutral-700 last:border-0">
                  <Link
                    href={`/blog/${result.slug}`}
                    className="block p-3 hover:bg-neutral-50 dark:hover:bg-neutral-700"
                    onClick={() => setIsOpen(false)}
                  >
                    <h3 className="font-medium">{result.title}</h3>
                    <p className="text-sm text-neutral-500 mt-1 line-clamp-2">
                      {result.summary}
                    </p>
                  </Link>
                </li>
              ))}
              <li className="p-2 text-center">
                <Link
                  href={`/search?q=${encodeURIComponent(query)}`}
                  className="text-primary text-sm hover:underline"
                  onClick={() => setIsOpen(false)}
                >
                  Ver todos los resultados
                </Link>
              </li>
            </ul>
          ) : debouncedQuery.length >= 2 ? (
            <div className="p-4 text-center text-neutral-500">
              No se encontraron resultados
            </div>
          ) : null}
        </div>
      )}
    </div>
  );
}
```

---

## üìä Webhooks de revalidaci√≥n

### 1. Configuraci√≥n en Contentful

```javascript
// Ejemplo de webhook a configurar en Contentful
// Settings > Webhooks > Add Webhook

// Nombre: Revalidate Website
// URL: https://tusitio.com/api/revalidate
// Triggers: Select specific triggering events
// ‚úì Entry: publish, unpublish
// ‚úì Asset: publish, unpublish

// Headers:
// X-Secret-Token: [your-secret-token]
// Content-Type: application/json
```

### 2. Procesador de webhook

```typescript
// app/api/webhooks/contentful/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { revalidatePath } from 'next/cache';

// Verificar firma del webhook (seguridad)
function verifySignature(request: NextRequest): boolean {
  const signature = request.headers.get('x-contentful-signature');
  const secret = process.env.CONTENTFUL_WEBHOOK_SECRET;
  
  if (!signature || !secret) return false;
  
  // Implementar verificaci√≥n de firma con HMAC
  // (Esta es una implementaci√≥n simplificada)
  return true;
}

export async function POST(request: NextRequest) {
  try {
    // Verificar que la solicitud es leg√≠tima
    if (!verifySignature(request)) {
      return NextResponse.json(
        { error: 'Invalid signature' },
        { status: 401 }
      );
    }
    
    // Leer el cuerpo del webhook
    const payload = await request.json();
    
    // Extraer informaci√≥n relevante
    const contentType = payload.sys.contentType?.sys.id;
    const entryId = payload.sys.id;
    const eventType = payload.sys.type; // 'publish', 'unpublish', etc.
    
    // Revalidar seg√∫n tipo de contenido
    if (contentType === 'post') {
      // Revalidar p√°gina de blog y listados
      revalidatePath('/blog');
      
      // Si tenemos el slug en los campos, revalidar la p√°gina espec√≠fica
      const slug = payload.fields?.slug?.['en-US'];
      if (slug) {
        revalidatePath(`/blog/${slug}`);
      }
    } else if (contentType === 'page') {
      // Revalidar p√°gina espec√≠fica
      const slug = payload.fields?.slug?.['en-US'];
      if (slug) {
        revalidatePath(`/${slug}`);
      }
    } else if (contentType === 'category') {
      // Revalidar p√°ginas de categor√≠as
      revalidatePath('/categories');
      
      const slug = payload.fields?.slug?.['en-US'];
      if (slug) {
        revalidatePath(`/categories/${slug}`);
      }
    } else {
      // Revalidar p√°gina principal para otros tipos
      revalidatePath('/');
    }
    
    // Responder con √©xito
    return NextResponse.json({
      revalidated: true,
      contentType,
      entryId,
      eventType,
    });
  } catch (error) {
    console.error('Webhook processing error:', error);
    return NextResponse.json(
      { error: 'Error processing webhook' },
      { status: 500 }
    );
  }
}
```

---

## üì± Optimizaci√≥n de im√°genes del CMS

### 1. Loader personalizado para Contentful

```typescript
// lib/image-loader.ts
export default function contentfulLoader({
  src,
  width,
  quality,
}: {
  src: string;
  width: number;
  quality?: number;
}) {
  // Solo procesar URLs de Contentful
  if (!src.includes('images.ctfassets.net')) {
    return src;
  }
  
  // Remover protocolo si existe
  const normalizedSrc = src.startsWith('//') 
    ? src 
    : src.replace(/^https?:\/\//, '//');
  
  // Par√°metros para la API de im√°genes de Contentful
  const params = [
    `w=${width}`,
    `q=${quality || 75}`,
    'fm=webp', // Formato WebP para navegadores modernos
  ];
  
  // Construir URL optimizada
  return `https://${normalizedSrc}?${params.join('&')}`;
}

// next.config.js (fragmento)
module.exports = {
  images: {
    loader: 'custom',
    loaderFile: './lib/image-loader.ts',
    domains: ['images.ctfassets.net'],
  },
};
```

### 2. Componente para im√°genes del CMS

```tsx
// components/ContentfulImage.tsx
import Image from 'next/image';
import { cn } from '@/lib/utils';

interface ContentfulImageProps {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  priority?: boolean;
  className?: string;
  sizes?: string;
}

export function ContentfulImage({
  src,
  alt,
  width,
  height,
  priority = false,
  className,
  sizes = '(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw',
}: ContentfulImageProps) {
  // Asegurarse de que la URL sea absoluta
  const imageUrl = src.startsWith('//') ? `https:${src}` : src;
  
  return (
    <div className={cn('overflow-hidden', className)}>
      <Image
        src={imageUrl}
        alt={alt}
        width={width || 1200}
        height={height || 800}
        priority={priority}
        sizes={sizes}
        className="w-full h-auto object-cover transition-transform duration-300 hover:scale-105"
      />
    </div>
  );
}
```

---

## üè∑Ô∏è Integraciones multiling√ºe con CMS

```typescript
// lib/contentful-i18n.ts
import { createClient } from 'contentful';
import { cache } from 'react';

// Cliente multiling√ºe
const client = createClient({
  space: process.env.CONTENTFUL_SPACE_ID!,
  accessToken: process.env.CONTENTFUL_ACCESS_TOKEN!,
});

// Funci√≥n para obtener contenido localizado
export const getLocalizedEntry = cache(async (
  id: string, 
  locale = 'es-ES',
  preview = false
) => {
  try {
    const entry = await client.getEntry(id, {
      locale,
      include: 2,
      ...(preview ? { 'sys.revision': 1 } : {}),
    });
    
    return entry;
  } catch (error) {
    console.error(`Error fetching entry ${id} in locale ${locale}:`, error);
    return null;
  }
});

// Funci√≥n para obtener localizaci√≥n anidada (refs desde otro idioma)
export const getLinkedLocalizedEntries = cache(async (
  contentType: string,
  locale = 'es-ES',
  limit = 10,
  skip = 0
) => {
  try {
    const entries = await client.getEntries({
      content_type: contentType,
      locale,
      limit,
      skip,
      include: 2,
    });
    
    return entries;
  } catch (error) {
    console.error(`Error fetching ${contentType} in locale ${locale}:`, error);
    return { items: [], total: 0, skip, limit };
  }
});
```

---

## üõ†Ô∏è Reglas para Cursor (CMS)

- Implementar generaci√≥n est√°tica incremental (ISR) para todas las p√°ginas de contenido
- Configurar webhooks para revalidaci√≥n autom√°tica cuando cambia el contenido
- Optimizar componentes para renderizar Rich Text del CMS
- Usar estrategias de cach√© en capas para contenido din√°mico
- Implementar loaders personalizados para optimizar im√°genes del CMS (WebP)
- Asegurar que todos los recursos son lazy-loaded excepto por el LCP
- Crear modo de preview para edici√≥n en tiempo real
- Configurar b√∫squeda optimizada con indices en el CMS
- Implementar estrategia para manejo de contenido multiling√ºe
- Usar tipos TypeScript para modelos de contenido del CMS

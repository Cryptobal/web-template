---
description: 
globs: 
alwaysApply: true
---
# Regla: aria-keyboard-nav.mdc

## üéØ Prop√≥sito
Establecer pautas claras para la implementaci√≥n de navegaci√≥n por teclado y atributos ARIA, asegurando que la aplicaci√≥n sea totalmente accesible para usuarios que dependen de tecnolog√≠as de asistencia.

---

## ‚å®Ô∏è Navegaci√≥n por teclado

### 1. Orden de tabulaci√≥n l√≥gico (tabindex)

```typescript
// Usar tabindex apropiadamente
// tabindex="0": Elemento en orden natural de tabulaci√≥n
// tabindex="-1": Excluir del orden de tabulaci√≥n, pero enfocable v√≠a JavaScript
// EVITAR tabindex > 0

// BIEN: Mantener el orden natural
<button>Primero</button>
<button>Segundo</button>

// BIEN: Elemento personalizado en orden de tabulaci√≥n natural
<div 
  role="button" 
  tabIndex={0} 
  onClick={handleClick}
  onKeyDown={(e) => e.key === 'Enter' && handleClick()}
>
  Bot√≥n personalizado
</div>

// MAL: Rompiendo el orden natural de tabulaci√≥n
<button tabIndex={2}>No hacerlo</button>
<button tabIndex={1}>Nunca</button>
```

### 2. Estados de foco visibles

```typescript
// CSS requerido
const focusStyles = `
  .focus-visible:focus {
    outline: 2px solid #0077FF;
    outline-offset: 2px;
  }
`;

// Componente Button con foco visible
function Button({ children, ...props }) {
  return (
    <button 
      className="px-4 py-2 bg-blue-500 text-white rounded focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2" 
      {...props}
    >
      {children}
    </button>
  );
}
```

### 3. Atajos de teclado para acciones comunes

```typescript
// Hook para manejar atajos de teclado
function useKeyboardShortcuts(shortcuts: Record<string, () => void>) {
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      // No activar cuando el usuario est√° escribiendo en un campo
      if (e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement) {
        return;
      }
      
      // Comprobar si hay un atajo para esta combinaci√≥n de teclas
      const key = e.key.toLowerCase();
      const shortcutKey = e.ctrlKey ? `ctrl+${key}` : key;
      
      if (shortcuts[shortcutKey]) {
        e.preventDefault();
        shortcuts[shortcutKey]();
      }
    };
    
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [shortcuts]);
}

// Uso
function SearchComponent() {
  const inputRef = useRef<HTMLInputElement>(null);
  
  useKeyboardShortcuts({
    '/': () => inputRef.current?.focus(),
    'escape': () => inputRef.current?.blur(),
  });
  
  return <input ref={inputRef} type="search" aria-label="Buscar" />;
}
```

### 4. Skip links para navegaci√≥n r√°pida

```typescript
// Componente SkipLink para ir al contenido principal
function SkipLinks() {
  return (
    <a 
      href="#main-content" 
      className="sr-only focus:not-sr-only focus:absolute focus:top-0 focus:left-0 focus:z-50 focus:p-4 focus:bg-white focus:text-black" 
    >
      Saltar al contenido principal
    </a>
  );
}

// En el componente Layout
function Layout({ children }) {
  return (
    <>
      <SkipLinks />
      <Header />
      <main id="main-content" tabIndex={-1}>
        {children}
      </main>
      <Footer />
    </>
  );
}
```

---

## üî§ Atributos ARIA

### 1. Roles sem√°nticos

```typescript
// Usar roles cuando el HTML sem√°ntico no es suficiente
<div role="button" tabIndex={0} onClick={handleClick}>Acci√≥n</div>
<div role="alert">Error: No se pudo cargar la p√°gina</div>
<div role="status">Cargando resultados...</div>
<div role="dialog" aria-modal="true">Contenido del modal</div>
```

### 2. Estados y propiedades

```typescript
// Comunicar estados de componentes
<button aria-pressed={isActive}>Activar</button>
<div aria-hidden={!isVisible}>Contenido oculto</div>
<input aria-invalid={hasError} aria-describedby="error-message" />
<div id="error-message" className="text-red-500">El campo es requerido</div>
```

### 3. Relaciones entre elementos

```typescript
// Establecer relaciones entre elementos
<button aria-controls="dropdown" aria-expanded={isOpen}>Men√∫</button>
<div id="dropdown" aria-labelledby="dropdown-button">
  {/* Opciones del men√∫ */}
</div>

<div role="tablist">
  <button 
    role="tab" 
    aria-selected={activeTab === 'tab1'} 
    aria-controls="panel1"
    id="tab1"
  >
    Tab 1
  </button>
  <div 
    role="tabpanel" 
    id="panel1" 
    aria-labelledby="tab1"
    hidden={activeTab !== 'tab1'}
  >
    Contenido del tab 1
  </div>
</div>
```

### 4. Live regions para anuncios din√°micos

```typescript
// Anunciar cambios din√°micos a lectores de pantalla
function NotificationSystem() {
  const [message, setMessage] = useState('');
  
  return (
    <div 
      aria-live="polite" // Opciones: off, polite, assertive
      aria-atomic="true" // Leer todo el contenido o solo cambios
      className="sr-only" // Visualmente oculto pero disponible para lectores
    >
      {message}
    </div>
  );
}
```

---

## üß† Patrones accesibles comunes

### 1. Men√∫ de navegaci√≥n desplegable

```tsx
function Dropdown() {
  const [isOpen, setIsOpen] = useState(false);
  const menuRef = useRef<HTMLUListElement>(null);
  
  const toggle = () => setIsOpen(!isOpen);
  
  // Cerrar al presionar Escape
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Escape' && isOpen) {
        setIsOpen(false);
      }
    };
    
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [isOpen]);

  return (
    <div>
      <button
        aria-haspopup="true"
        aria-expanded={isOpen}
        aria-controls="dropdown-menu"
        onClick={toggle}
      >
        Men√∫
      </button>
      
      <ul
        id="dropdown-menu"
        ref={menuRef}
        role="menu"
        hidden={!isOpen}
        className={isOpen ? 'block' : 'hidden'}
      >
        <li role="menuitem">
          <a href="/opcion1">Opci√≥n 1</a>
        </li>
        <li role="menuitem">
          <a href="/opcion2">Opci√≥n 2</a>
        </li>
      </ul>
    </div>
  );
}
```

### 2. Modal dialogo

```tsx
function Modal({ isOpen, onClose, title, children }) {
  // Referencia para enfocar al abrir
  const modalRef = useRef<HTMLDivElement>(null);
  
  // Enfocar el modal al abrir
  useEffect(() => {
    if (isOpen && modalRef.current) {
      modalRef.current.focus();
    }
  }, [isOpen]);
  
  // Gestionar la captura del foco dentro del modal
  useEffect(() => {
    if (!isOpen) return;
    
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        onClose();
      }
    };
    
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [isOpen, onClose]);
  
  if (!isOpen) return null;
  
  return (
    <>
      {/* Overlay */}
      <div 
        className="fixed inset-0 bg-black bg-opacity-50"
        onClick={onClose}
      />
      
      {/* Modal */}
      <div
        ref={modalRef}
        role="dialog"
        aria-modal="true"
        aria-labelledby="modal-title"
        className="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white p-6 rounded-lg"
        tabIndex={-1}
      >
        <h2 id="modal-title">{title}</h2>
        <div>{children}</div>
        <button 
          onClick={onClose}
          aria-label="Cerrar"
          className="absolute top-2 right-2"
        >
          √ó
        </button>
      </div>
    </>
  );
}
```

---

## üõ†Ô∏è Reglas para Cursor (Frontend)

- Implementar skiplinks en todos los layouts
- Asegurar navegabilidad completa por teclado (Tab, Enter, Escape, Space)
- Usar ARIA s√≥lo cuando HTML sem√°ntico no es suficiente
- Incluir foco visible en todos los elementos interactivos
- Implementar live regions para actualizaciones din√°micas importantes
- Asegurarse de que modales, drawers y di√°logos manejen correctamente el foco
- Evitar usar tabindex > 0
- A√±adir etiquetas aria-label para elementos sin texto visible
- Incluir roles apropiados para elementos personalizados
- Probar la navegaci√≥n con teclado y lectores de pantalla regularmente
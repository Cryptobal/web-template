---
description: 
globs: 
alwaysApply: true
---
# Regla: onboarding.mdc

## üéØ Prop√≥sito
Proporcionar un proceso de onboarding estructurado para nuevos desarrolladores que se unan al proyecto, asegurando una comprensi√≥n r√°pida del sistema de reglas, arquitectura, y flujos de trabajo, con el objetivo de acelerar su productividad y mantener la coherencia del c√≥digo.

---

## üöÄ Proceso de onboarding

### 1. Configuraci√≥n inicial (D√≠a 1)

#### Requisitos previos
- Node.js v18+
- Git
- IDE recomendado: VS Code con extensi√≥n Cursor
- Cuenta en Vercel
- Acceso al repositorio Git
- Acceso a Cloudflare (si aplica)

#### Pasos de instalaci√≥n
1. Clonar el repositorio
   ```bash
   git clone https://github.com/organizaci√≥n/proyecto.git
   cd proyecto
   ```

2. Instalar dependencias
   ```bash
   npm install
   ```

3. Copiar variables de entorno
   ```bash
   cp .env.example .env.local
   ```

4. Ejecutar entorno de desarrollo
   ```bash
   npm run dev
   ```

### 2. Estructura del proyecto (D√≠a 1-2)

Familiarizarse con la estructura del proyecto siguiendo estas reglas:
- `base/estructura-carpetas.mdc`: Estructura general
- `frontend/front-end.mdc`: Organizaci√≥n del frontend
- `base/next-config.mdc`: Configuraci√≥n de Next.js

#### Revisi√≥n guiada de estructura
/app # Rutas y p√°ginas (App Router)
/components # Componentes reutilizables
/lib # Funciones utilitarias y l√≥gica de negocio
/public # Archivos est√°ticos
/styles # Estilos globales


### 3. Sistema de dise√±o y componentes (D√≠a 2-3)

Revisar el sistema de dise√±o y componentes disponibles:
- `frontend/design-system.mdc`: Sistema de dise√±o global
- `frontend/componentes-ux.mdc`: Componentes UI/UX disponibles

#### Componentes principales a conocer
- Layout base (Header, Footer)
- Componentes UI (Button, Card, Input, etc.)
- Formularios y validaci√≥n
- Gesti√≥n de estado

### 4. Flujo de trabajo de desarrollo (D√≠a 3-4)

Comprender el flujo de trabajo y herramientas de desarrollo:
- `devops/ci-cd.mdc`: Pipeline de CI/CD
- `base/typescript.mdc`: Configuraci√≥n y uso de TypeScript
- `devops/testing.mdc`: Estrategias de testing

#### Proceso de git
1. Crear una rama desde `develop` para cada tarea
   ```bash
   git checkout develop
   git pull
   git checkout -b feature/nombre-de-caracter√≠stica
   ```

2. Comprobar que cumple con est√°ndares
   ```bash
   npm run lint
   npm run type-check
   npm run test
   ```

3. Enviar PR a `develop`

### 5. Despliegue y entornos (D√≠a 4-5)

Conocer los entornos y procesos de despliegue:
- `devops/deploy.mdc`: Proceso de despliegue
- `devops/cloudflare-vercel/integracion.mdc`: Integraci√≥n Cloudflare/Vercel

#### Entornos disponibles
- Desarrollo: PR Previews en Vercel
- Staging: `develop` branch -> staging.tusitio.com
- Producci√≥n: `main` branch -> tusitio.com

---

## üìö Documentaci√≥n y recursos

### 1. Sistema de reglas Cursor
Comenzar revisando el √≠ndice maestro en `.cursor/rules/00-index.mdc` para tener una visi√≥n general del sistema de reglas.

### 2. Recursos complementarios
- Repositorio de componentes (Storybook): https://storybook.tusitio.com
- Wiki interna: https://tusitio.atlassian.net/wiki
- Canal de Slack: #proyecto-tusitio

### 3. Sesiones de mentoring
- Sesi√≥n 1 (D√≠a 1): Estructura y sistema de dise√±o
- Sesi√≥n 2 (D√≠a 3): Flujo de trabajo y mejores pr√°cticas
- Sesi√≥n 3 (D√≠a 5): Q&A y revisi√≥n

---

## üß™ Primer proyecto de pr√°ctica

Para consolidar el conocimiento, se recomienda completar este proyecto de pr√°ctica:

1. Crear un nuevo componente siguiendo el sistema de dise√±o
2. Implementar una nueva p√°gina con ruta din√°mica
3. A√±adir tests unitarios para el componente
4. Desplegar a entorno de desarrollo

### Criterios de evaluaci√≥n
- Uso correcto de TypeScript
- Cumplimiento de est√°ndares de accesibilidad
- Tests adecuados
- Rendimiento optimizado

---

## üõ†Ô∏è Reglas para Cursor (Onboarding)

- Todo nuevo desarrollador debe seguir este proceso de onboarding
- Asignar un mentor para guiar durante la primera semana
- Revisar primero el √≠ndice maestro de reglas para tener una visi√≥n general
- Completar el proyecto de pr√°ctica antes de trabajar en tickets reales
- Programar una sesi√≥n de feedback al finalizar la primera semana
- Compartir dudas y preguntas en el canal de Slack designado
- Actualizar este documento cuando se identifiquen mejoras al proceso

---
description: 
globs: 
alwaysApply: true
---
# Regla: tracking-conversiones.mdc

## 🎯 Propósito
Establecer un sistema robusto y unificado para el seguimiento de conversiones y eventos en el sitio web. Este sistema debe capturar interacciones clave, integrarse con múltiples plataformas de analytics y permitir análisis precisos para optimización continua.

---

## 📊 Arquitectura del sistema de tracking

### 1. Capa unificada de datos (Data Layer)
```typescript
// lib/analytics/dataLayer.ts
type EventData = Record<string, any>;

class DataLayer {
  private static instance: DataLayer;
  private dataLayer: EventData[] = [];
  private subscribers: ((eventName: string, eventData: EventData) => void)[] = [];

  private constructor() {
    // Singleton
    if (typeof window !== 'undefined') {
      window.dataLayer = window.dataLayer || [];
      this.dataLayer = window.dataLayer;
    }
  }

  static getInstance(): DataLayer {
    if (!DataLayer.instance) {
      DataLayer.instance = new DataLayer();
    }
    return DataLayer.instance;
  }

  push(eventName: string, eventData: EventData = {}): void {
    const event = {
      event: eventName,
      timestamp: new Date().toISOString(),
      ...eventData,
    };
    
    // Añadir al data layer
    this.dataLayer.push(event);
    
    // Notificar a suscriptores
    this.subscribers.forEach(callback => {
      callback(eventName, eventData);
    });
    
    // Debug en desarrollo
    if (process.env.NODE_ENV !== 'production') {
      console.log(`[DataLayer] ${eventName}`, eventData);
    }
  }

  subscribe(callback: (eventName: string, eventData: EventData) => void): () => void {
    this.subscribers.push(callback);
    return () => {
      this.subscribers = this.subscribers.filter(cb => cb !== callback);
    };
  }
}

export const dataLayer = DataLayer.getInstance();
```

### 2. Hook para eventos
```typescript
// lib/analytics/useTracking.ts
import { useCallback } from 'react';
import { dataLayer } from './dataLayer';

export enum TrackingEvents {
  PAGE_VIEW = 'page_view',
  BUTTON_CLICK = 'button_click',
  FORM_SUBMIT = 'form_submit',
  FORM_START = 'form_start',
  FORM_ERROR = 'form_error',
  COTIZAR_START = 'cotizar_start',
  COTIZAR_COMPLETE = 'cotizar_complete',
  CONTACTO_SUBMIT = 'contacto_submit',
  DOWNLOAD = 'download',
  SCROLL_MILESTONE = 'scroll_milestone',
  VIDEO_START = 'video_start',
  VIDEO_COMPLETE = 'video_complete',
  EXTERNAL_LINK_CLICK = 'external_link_click',
}

export function useTracking() {
  const trackEvent = useCallback((eventName: TrackingEvents | string, eventData = {}) => {
    dataLayer.push(eventName, eventData);
  }, []);

  const trackPageView = useCallback((page: string, pageData = {}) => {
    dataLayer.push(TrackingEvents.PAGE_VIEW, {
      page_path: page,
      page_title: document.title,
      ...pageData,
    });
  }, []);

  const trackButtonClick = useCallback((buttonName: string, buttonData = {}) => {
    dataLayer.push(TrackingEvents.BUTTON_CLICK, {
      button_name: buttonName,
      ...buttonData,
    });
  }, []);

  const trackFormSubmit = useCallback((formName: string, formData = {}) => {
    dataLayer.push(TrackingEvents.FORM_SUBMIT, {
      form_name: formName,
      ...formData,
    });
  }, []);

  const trackExternalLink = useCallback((url: string, linkText: string) => {
    dataLayer.push(TrackingEvents.EXTERNAL_LINK_CLICK, {
      link_url: url,
      link_text: linkText,
    });
  }, []);

  return {
    trackEvent,
    trackPageView,
    trackButtonClick,
    trackFormSubmit,
    trackExternalLink,
  };
}
```

---

## 🔌 Integraciones con proveedores

### 1. Google Analytics 4 (GA4)
```typescript
// lib/analytics/providers/ga4.ts
import { dataLayer } from '../dataLayer';

export function initGA4(measurementId: string): void {
  // Skip if already initialized or in non-browser environment
  if (typeof window === 'undefined' || window.gtag) return;

  // Add GA4 script
  const script = document.createElement('script');
  script.src = `https://www.googletagmanager.com/gtag/js?id=${measurementId}`;
  script.async = true;
  document.head.appendChild(script);

  // Initialize dataLayer for gtag
  window.dataLayer = window.dataLayer || [];
  window.gtag = function gtag() {
    window.dataLayer.push(arguments);
  };
  window.gtag('js', new Date());
  window.gtag('config', measurementId, {
    send_page_view: false, // Manejamos esto manualmente
  });

  // Subscribe to dataLayer events to map to GA4
  dataLayer.subscribe((eventName, eventData) => {
    switch (eventName) {
      case 'page_view':
        window.gtag('event', 'page_view', {
          page_path: eventData.page_path,
          page_title: eventData.page_title,
        });
        break;
      case 'button_click':
        window.gtag('event', 'click', {
          element: eventData.button_name,
          ...eventData,
        });
        break;
      case 'form_submit':
        window.gtag('event', 'form_submit', {
          form_name: eventData.form_name,
          ...eventData,
        });
        break;
      case 'contacto_submit':
        window.gtag('event', 'generate_lead', {
          form_name: 'contacto',
          ...eventData,
        });
        break;
      case 'cotizar_complete':
        window.gtag('event', 'generate_lead', {
          form_name: 'cotizar',
          ...eventData,
        });
        break;
      default:
        // Enviar cualquier otro evento con el mismo nombre
        window.gtag('event', eventName, eventData);
    }
  });
}
```

### 2. Facebook Pixel (Meta)
```typescript
// lib/analytics/providers/metaPixel.ts
import { dataLayer } from '../dataLayer';

export function initMetaPixel(pixelId: string): void {
  if (typeof window === 'undefined' || window.fbq) return;

  // Initialize Meta Pixel
  window.fbq = function() {
    window._fbq.push(arguments);
  };
  
  window._fbq = window._fbq || [];
  window.fbq('init', pixelId);
  
  // Add Meta Pixel script
  const script = document.createElement('script');
  script.src = 'https://connect.facebook.net/en_US/fbevents.js';
  script.async = true;
  document.head.appendChild(script);
  
  // Subscribe to dataLayer events
  dataLayer.subscribe((eventName, eventData) => {
    switch (eventName) {
      case 'page_view':
        window.fbq('track', 'PageView');
        break;
      case 'contacto_submit':
        window.fbq('track', 'Lead', {
          content_name: 'contacto',
          ...eventData,
        });
        break;
      case 'cotizar_complete':
        window.fbq('track', 'Lead', {
          content_name: 'cotizar',
          value: eventData.value || 0,
          currency: 'CLP',
          ...eventData,
        });
        break;
      case 'form_submit':
        window.fbq('track', 'SubmitForm', {
          form_name: eventData.form_name,
          ...eventData,
        });
        break;
      // Otros eventos específicos...
    }
  });
}
```

---

## 🧩 Componentes y HOCs

### 1. TrackingProvider (Contexto global)
```tsx
// lib/analytics/TrackingProvider.tsx
import React, { createContext, useContext, useEffect } from 'react';
import { usePathname, useSearchParams } from 'next/navigation';
import { useTracking } from './useTracking';
import { initGA4 } from './providers/ga4';
import { initMetaPixel } from './providers/metaPixel';

interface TrackingContextValue {
  trackEvent: (eventName: string, eventData?: Record<string, any>) => void;
  trackPageView: (page: string, pageData?: Record<string, any>) => void;
  trackButtonClick: (buttonName: string, buttonData?: Record<string, any>) => void;
  trackFormSubmit: (formName: string, formData?: Record<string, any>) => void;
  trackExternalLink: (url: string, linkText: string) => void;
}

const TrackingContext = createContext<TrackingContextValue | null>(null);

export function TrackingProvider({ children }: { children: React.ReactNode }) {
  const tracking = useTracking();
  const pathname = usePathname();
  const searchParams = useSearchParams();
  
  // Inicializar proveedores de analytics solo en cliente y producción
  useEffect(() => {
    if (typeof window !== 'undefined' && process.env.NODE_ENV === 'production') {
      const GA4_ID = process.env.NEXT_PUBLIC_GA4_MEASUREMENT_ID;
      const META_PIXEL_ID = process.env.NEXT_PUBLIC_META_PIXEL_ID;

      if (GA4_ID) {
        initGA4(GA4_ID);
      }
      
      if (META_PIXEL_ID) {
        initMetaPixel(META_PIXEL_ID);
      }
    }
  }, []);
  
  // Tracking automático de cambios de página
  useEffect(() => {
    if (pathname) {
      // Construir la URL completa con los query params
      const queryString = searchParams?.toString();
      const url = queryString ? `${pathname}?${queryString}` : pathname;
      
      tracking.trackPageView(url);
    }
  }, [pathname, searchParams, tracking]);
  
  return (
    <TrackingContext.Provider value={tracking}>
      {children}
    </TrackingContext.Provider>
  );
}

export function useTrackingContext() {
  const context = useContext(TrackingContext);
  if (!context) {
    throw new Error('useTrackingContext must be used within a TrackingProvider');
  }
  return context;
}
```

### 2. Componentes trackables

```tsx
// components/ui/TrackableButton.tsx
import React from 'react';
import { useTrackingContext } from '@/lib/analytics/TrackingProvider';

interface TrackableButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  trackingName: string;
  trackingData?: Record<string, any>;
}

export function TrackableButton({
  trackingName,
  trackingData = {},
  onClick,
  children,
  ...props
}: TrackableButtonProps) {
  const { trackButtonClick } = useTrackingContext();
  
  const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {
    trackButtonClick(trackingName, trackingData);
    onClick?.(e);
  };
  
  return (
    <button {...props} onClick={handleClick}>
      {children}
    </button>
  );
}
```

---

## 📈 Conversiones clave a trackear

### 1. Formulario de contacto
```tsx
// components/forms/ContactForm.tsx
import { useTrackingContext } from '@/lib/analytics/TrackingProvider';
import { TrackingEvents } from '@/lib/analytics/useTracking';

export function ContactForm() {
  const { trackEvent, trackFormSubmit } = useTrackingContext();
  
  const handleSubmit = async (formData: FormData) => {
    try {
      // Registrar inicio del formulario
      trackEvent(TrackingEvents.FORM_START, { form_name: 'contacto' });
      
      // Procesar envío...
      const response = await fetch('/api/contact', {
        method: 'POST',
        body: formData,
      });
      
      if (response.ok) {
        // Registrar envío exitoso
        trackFormSubmit('contacto', {
          source: formData.get('source') || 'website',
        });
        
        // Registrar conversión específica
        trackEvent(TrackingEvents.CONTACTO_SUBMIT, {
          form_location: 'contact_page',
        });
      } else {
        // Registrar error
        trackEvent(TrackingEvents.FORM_ERROR, {
          form_name: 'contacto',
          error: 'server_error',
        });
      }
    } catch (error) {
      // Registrar error
      trackEvent(TrackingEvents.FORM_ERROR, {
        form_name: 'contacto',
        error: 'client_error',
      });
    }
  };
  
  // Resto del componente...
}
```

### 2. Formulario de cotización
```tsx
// components/forms/CotizarForm.tsx
import { useTrackingContext } from '@/lib/analytics/TrackingProvider';
import { TrackingEvents } from '@/lib/analytics/useTracking';

export function CotizarForm() {
  const { trackEvent } = useTrackingContext();
  
  // Al iniciar el formulario (primer paso)
  const handleStartForm = () => {
    trackEvent(TrackingEvents.COTIZAR_START, {
      form_location: window.location.pathname,
    });
  };
  
  // Al completar todos los pasos
  const handleComplete = (formData: Record<string, any>) => {
    trackEvent(TrackingEvents.COTIZAR_COMPLETE, {
      form_location: window.location.pathname,
      service_type: formData.serviceType,
      estimated_value: formData.budget || 'no_specified',
    });
  };
  
  // Resto del componente...
}
```

---

## 🧠 Seguimiento de comportamiento avanzado

### 1. Tracker de scroll
```tsx
// lib/analytics/useScrollTracking.ts
import { useEffect, useState } from 'react';
import { useTrackingContext } from './TrackingProvider';
import { TrackingEvents } from './useTracking';

export function useScrollTracking(milestones = [25, 50, 75, 90]) {
  const { trackEvent } = useTrackingContext();
  const [trackedMilestones, setTrackedMilestones] = useState<number[]>([]);
  
  useEffect(() => {
    if (typeof window === 'undefined') return;
    
    const handleScroll = () => {
      const scrollPercent = Math.round(
        (window.scrollY / (document.body.scrollHeight - window.innerHeight)) * 100
      );
      
      milestones.forEach(milestone => {
        if (
          scrollPercent >= milestone && 
          !trackedMilestones.includes(milestone)
        ) {
          trackEvent(TrackingEvents.SCROLL_MILESTONE, {
            milestone_percent: milestone,
            page_path: window.location.pathname,
          });
          setTrackedMilestones(prev => [...prev, milestone]);
        }
      });
    };
    
    window.addEventListener('scroll', handleScroll, { passive: true });
    return () => window.removeEventListener('scroll', handleScroll);
  }, [milestones, trackEvent, trackedMilestones]);
}
```

### 2. Tracking de tiempo de permanencia
```tsx
// lib/analytics/useEngagementTime.ts
import { useEffect } from 'react';
import { useTrackingContext } from './TrackingProvider';

export function useEngagementTime(thresholds = [30, 60, 120, 300]) {
  const { trackEvent } = useTrackingContext();
  
  useEffect(() => {
    if (typeof window === 'undefined') return;
    
    const startTime = Date.now();
    const timers: NodeJS.Timeout[] = [];
    
    // Configurar temporizadores para cada umbral
    thresholds.forEach(seconds => {
      const timer = setTimeout(() => {
        trackEvent('engagement_time_milestone', {
          seconds_engaged: seconds,
          page_path: window.location.pathname,
        });
      }, seconds * 1000);
      
      timers.push(timer);
    });
    
    // Limpiar temporizadores al salir y enviar tiempo total
    return () => {
      timers.forEach(timer => clearTimeout(timer));
      
      const totalSeconds = Math.round((Date.now() - startTime) / 1000);
      trackEvent('engagement_time_total', {
        seconds_total: totalSeconds,
        page_path: window.location.pathname,
      });
    };
  }, [trackEvent, thresholds]);
}
```

---

## 🔄 Testeo y calidad de datos

### 1. Validador de eventos
```typescript
// lib/analytics/validateEvent.ts
import { z } from 'zod';

// Esquemas de validación para diferentes tipos de eventos
const baseEventSchema = z.object({
  timestamp: z.string().optional(),
});

const pageViewSchema = baseEventSchema.extend({
  page_path: z.string(),
  page_title: z.string(),
});

const formSubmitSchema = baseEventSchema.extend({
  form_name: z.string(),
  form_location: z.string().optional(),
});

// Exportar validadores
export const validatePageView = (data: unknown) => pageViewSchema.safeParse(data);
export const validateFormSubmit = (data: unknown) => formSubmitSchema.safeParse(data);

// Validador central
export function validateEvent(eventName: string, eventData: unknown) {
  switch (eventName) {
    case 'page_view':
      return validatePageView(eventData);
    case 'form_submit':
    case 'contacto_submit':
    case 'cotizar_complete':
      return validateFormSubmit(eventData);
    default:
      return { success: true, data: eventData };
  }
}
```

### 2. Modo de depuración
```typescript
// lib/analytics/debug.ts
export function enableAnalyticsDebug() {
  if (typeof window !== 'undefined') {
    localStorage.setItem('analytics_debug', 'enabled');
    console.log('Analytics debug mode enabled. Events will be logged to console.');
  }
}

export function disableAnalyticsDebug() {
  if (typeof window !== 'undefined') {
    localStorage.removeItem('analytics_debug');
    console.log('Analytics debug mode disabled.');
  }
}

export function isAnalyticsDebugEnabled() {
  if (typeof window !== 'undefined') {
    return localStorage.getItem('analytics_debug') === 'enabled';
  }
  return false;
}
```

---

## 🛠️ Reglas para Cursor (Frontend)

- Implementar el `TrackingProvider` en el layout principal o `_app.tsx`
- Definir eventos consistentes en `TrackingEvents` para reutilización
- Usar `useTracking` o `useTrackingContext` para todas las llamadas de tracking
- Cada formulario debe implementar tracking de inicio, errores y envío
- Botones CTA deben usar `TrackableButton` o trackear manualmente
- Páginas críticas deben implementar `useScrollTracking` y `useEngagementTime`
- Validar events con `validateEvent` antes de enviarlos
- Mantener todas las claves de configuración en variables de entorno
- Implementar GTM, GA4 y Meta Pixel como mínimo
- Usar nombres de eventos estándar para facilitar el análisis cruzado 
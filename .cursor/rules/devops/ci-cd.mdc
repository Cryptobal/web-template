---
description: 
globs: 
alwaysApply: true
---
# Regla: ci-cd.mdc

## 🎯 Propósito
Establecer un sistema de integración y despliegue continuo (CI/CD) robusto y automatizado para el proyecto web, integrando GitHub Actions con Vercel para el frontend y Cloudflare para la CDN, asegurando un proceso de publicación confiable, verificable y optimizado para rendimiento.

---

## 🔄 Arquitectura del flujo CI/CD

```
┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐
│                 │     │                 │     │                 │     │                 │
│     GitHub      │────▶│  GitHub Actions │────▶│     Vercel      │────▶│   Cloudflare    │
│  (Repositorio)  │     │     (CI/CD)     │     │  (Despliegue)   │     │     (CDN)       │
│                 │     │                 │     │                 │     │                 │
└─────────────────┘     └─────────────────┘     └─────────────────┘     └─────────────────┘
        │                       │                       │                       │
        ▼                       ▼                       ▼                       ▼
┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐
│   Pull Request  │     │ Tests, Linting, │     │ Preview Deploy, │     │  Optimización,  │
│   Code Review   │     │ Type Checking   │     │ Production      │     │  Caché, Edge    │
└─────────────────┘     └─────────────────┘     └─────────────────┘     └─────────────────┘
```

---

## 📁 Estructura de archivos CI/CD

```
.github/
  workflows/
    ci.yml           # Verificación de código (PR, push a ramas)
    preview.yml      # Despliegue de preview (PR)
    production.yml   # Despliegue a producción (main/master)
    lighthouse.yml   # Pruebas de rendimiento
    purge-cache.yml  # Purga caché de Cloudflare
```

---

## 🔍 Flujo para Pull Requests

### 1. Archivo de CI principal

```yaml
# .github/workflows/ci.yml
name: CI

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint code
        run: npm run lint
      
      - name: Type check
        run: npm run type-check
        
      - name: Run tests
        run: npm run test
      
      # Opcionales pero recomendados:
      - name: Check bundle size
        run: npm run analyze-bundle
        
      - name: Check for a11y issues
        run: npm run a11y-check
```

### 2. Archivo para deploy de preview

```yaml
# .github/workflows/preview.yml
name: Preview Deployment

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          github-comment: true
```

---

## 🚀 Flujo para Producción

### 1. Archivo de deploy a producción

```yaml
# .github/workflows/production.yml
name: Production Deployment

on:
  push:
    branches: [ main ]

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm run test
        
      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          
      - name: Purge Cloudflare Cache
        uses: jakejarvis/cloudflare-purge-action@v0.3.0
        env:
          CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE }}
          CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}
```

---

## 📊 Monitoreo de rendimiento

### 1. Verificación de Lighthouse en cada deploy

```yaml
# .github/workflows/lighthouse.yml
name: Lighthouse CI

on:
  deployment_status:
    # Ejecutar cuando Vercel completa un deploy

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    if: ${{ github.event.deployment_status.state == 'success' }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Lighthouse Audit
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            ${{ github.event.deployment_status.target_url }}
            ${{ github.event.deployment_status.target_url }}/blog
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: '.github/lighthouse-config.json'
          
      - name: Verificar puntuaciones
        run: |
          score=$(cat .lighthouseci/manifest.json | jq '.summary.performance')
          if (( $(echo "$score < 0.9" | bc -l) )); then
            echo "❌ Performance score is below 90: $score"
            exit 1
          else
            echo "✅ Performance score is good: $score"
          fi
```

### 2. Configuración de Lighthouse

```json
// .github/lighthouse-config.json
{
  "ci": {
    "collect": {
      "numberOfRuns": 3,
      "settings": {
        "preset": "desktop"
      }
    },
    "assert": {
      "assertions": {
        "categories:performance": ["error", {"minScore": 0.9}],
        "categories:accessibility": ["error", {"minScore": 0.9}],
        "categories:best-practices": ["error", {"minScore": 0.9}],
        "categories:seo": ["error", {"minScore": 0.9}],
        "first-contentful-paint": ["error", {"maxNumericValue": 1800}],
        "interactive": ["error", {"maxNumericValue": 3800}],
        "largest-contentful-paint": ["error", {"maxNumericValue": 2500}]
      }
    }
  }
}
```

---

## 🧹 Gestión automática de caché

### 1. Purga de caché en Cloudflare

```yaml
# .github/workflows/purge-cache.yml
name: Purge Cloudflare Cache

on:
  workflow_dispatch:  # Permitir ejecución manual
  schedule:
    - cron: '0 4 * * 1'  # Todos los lunes a las 4am

jobs:
  purge:
    runs-on: ubuntu-latest
    steps:
      - name: Purge Cloudflare Cache
        uses: jakejarvis/cloudflare-purge-action@v0.3.0
        env:
          CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE }}
          CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}
```

### 2. Invalidación selectiva de caché

```javascript
// scripts/purge-cloudflare-by-path.js
const axios = require('axios');

// Uso: node purge-cloudflare-by-path.js "/blog" "/homepage"
const purgeUrls = async (paths) => {
  const baseUrl = process.env.SITE_URL || 'https://tusitio.com';
  const urls = paths.map(path => `${baseUrl}${path}`);
  
  try {
    const response = await axios.post(
      `https://api.cloudflare.com/client/v4/zones/${process.env.CLOUDFLARE_ZONE}/purge_cache`,
      { files: urls },
      {
        headers: {
          'Authorization': `Bearer ${process.env.CLOUDFLARE_TOKEN}`,
          'Content-Type': 'application/json',
        },
      }
    );
    
    console.log('Purge response:', response.data);
  } catch (error) {
    console.error('Error purging cache:', error.response?.data || error.message);
    process.exit(1);
  }
};

const args = process.argv.slice(2);
if (args.length === 0) {
  console.error('Please provide at least one path to purge');
  process.exit(1);
}

purgeUrls(args);
```

---

## 🔑 Gestión segura de secretos

### 1. Configuración de secrets en GitHub

```
VERCEL_TOKEN=           # Token de API de Vercel
VERCEL_ORG_ID=          # ID de la organización en Vercel
VERCEL_PROJECT_ID=      # ID del proyecto en Vercel
CLOUDFLARE_ZONE=        # ID de zona de Cloudflare
CLOUDFLARE_TOKEN=       # Token de API de Cloudflare
SITE_URL=               # URL del sitio en producción
```

### 2. Configuración de secretos en Vercel

```
1. En Vercel Dashboard > [Proyecto] > Settings > Environment Variables
2. Añadir variables críticas como:
   - DATABASE_URL
   - API_SECRET
   - CLOUDFLARE_API_TOKEN
   - NEXT_PUBLIC_ANALYTICS_ID
```

---

## 🧪 Despliegue basado en características (Feature Flags)

```typescript
// lib/feature-flags.ts
import { createClient } from '@vercel/edge-config';
const client = createClient(process.env.EDGE_CONFIG);

export async function isFeatureEnabled(featureKey: string, defaultValue = false): Promise<boolean> {
  if (!client) return defaultValue;
  
  try {
    return await client.get(featureKey) || defaultValue;
  } catch (error) {
    console.error(`Error getting feature flag ${featureKey}:`, error);
    return defaultValue;
  }
}

// Uso con GitHub Actions para habilitar features
// .github/workflows/enable-feature.yml
name: Enable Feature

on:
  workflow_dispatch:
    inputs:
      feature:
        description: 'Feature key to enable'
        required: true
      enabled:
        description: 'Enable feature (true/false)'
        required: true
        default: 'true'

jobs:
  enable:
    runs-on: ubuntu-latest
    steps:
      - name: Update Feature Flag
        run: |
          curl -X PATCH \
            -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"items\": [{\"operation\": \"update\", \"key\": \"${{ github.event.inputs.feature }}\", \"value\": ${{ github.event.inputs.enabled }}]}" \
            "https://api.vercel.com/v1/edge-config/${{ secrets.EDGE_CONFIG_ID }}/items"
```

---

## 📱 Pipeline para PWA

```yaml
# .github/workflows/pwa-validate.yml
name: PWA Validation

on:
  pull_request:
    paths:
      - 'public/manifest.json'
      - 'public/service-worker.js'
      - 'public/workbox-*.js'

jobs:
  validate-pwa:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Validate Web Manifest
        run: npx web-manifest-validator ./public/manifest.json
        
      - name: Validate Service Worker
        uses: pwa-builder/pwabuilder-action@v1
        with:
          manifest-path: ./public/manifest.json
          service-worker-path: ./public/service-worker.js
```

---

## 🌐 Automatización para multi-entorno

```yaml
# .github/workflows/environment-deployment.yml
name: Environment Deployment

on:
  push:
    branches:
      - main
      - develop
      - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      # Determinar automáticamente el entorno basado en la rama
      - name: Set environment
        id: env
        run: |
          if [[ $GITHUB_REF == 'refs/heads/main' ]]; then
            echo "::set-output name=environment::production"
            echo "::set-output name=url::https://tusitio.com"
          elif [[ $GITHUB_REF == 'refs/heads/staging' ]]; then
            echo "::set-output name=environment::staging"
            echo "::set-output name=url::https://staging.tusitio.com"
          else
            echo "::set-output name=environment::development"
            echo "::set-output name=url::https://dev.tusitio.com"
          fi
      
      # Desplegar a Vercel con el entorno correspondiente
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          alias-domains: |
            ${{ steps.env.outputs.url }}
          vercel-args: '--${{ steps.env.outputs.environment }}'
```

---

## 🛠️ Reglas para Cursor (DevOps)

- Configurar CI/CD en cada nuevo proyecto con GitHub Actions, Vercel y Cloudflare
- Separar flujos para verificación de código y despliegue
- Implementar pruebas de Lighthouse en cada PR y despliegue
- Usar Vercel para previews automáticas en cada PR
- Configurar purga automática de caché en Cloudflare tras despliegues
- Mantener secretos en GitHub Actions y nunca en código
- Usar feature flags para despliegue progresivo de características
- Implementar monitoreo automático de rendimiento post-despliegue
- Configurar alertas para degradaciones de rendimiento
- Mantener las dependencias actualizadas con Renovate o Dependabot

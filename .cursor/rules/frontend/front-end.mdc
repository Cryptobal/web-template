---
description: 
globs: 
alwaysApply: true
---
# Regla: Estructura y buenas pr√°cticas del Frontend (Next.js + TailwindCSS)

## üéØ Prop√≥sito
Establecer convenciones claras y reutilizables para el desarrollo frontend de cualquier sitio web moderno, asegurando rendimiento, escalabilidad, accesibilidad, dise√±o unificado, experiencia de usuario superior y optimizaci√≥n SEO t√©cnica.

---

## üöÄ Tecnolog√≠as base

- **Framework:** Next.js (App Router)
- **Estilos:** TailwindCSS (modo JIT)
- **Componentes:** React funcional (`useState`, `useEffect`, `useContext`, etc.)
- **Contenido din√°mico:** Markdown (`.md`) con `frontmatter` para blog y textos
- **Im√°genes:** Next.js `<Image />` servidas desde CDN
- **Deployment:** Vercel (con SSG preferido) u otro proveedor con soporte de generaci√≥n est√°tica

---

## üß± Estructura del proyecto recomendada
/app
/[slug]/page.tsx
/page.tsx
/layout.tsx
/components
/ui/
Button.tsx
Input.tsx
/layout/
Header.tsx
Footer.tsx
/form/
ContactForm.tsx
CotizarForm.tsx
/public
/src
/blog/*.md

---

## üìê Reglas de dise√±o y UI/UX

- Dise√±o **moderno, limpio, minimalista y mobile-first**
- Uso intensivo de TailwindCSS para layout, espaciado, tipograf√≠a y colores
- Todos los textos deben venir desde Markdown o props
- Componentes accesibles (`aria-*`, etiquetas sem√°nticas)
- Layout base global con `<Header />` y `<Footer />` reutilizables
- Uso consistente de contenedores sem√°nticos: `<header>`, `<main>`, `<section>`, `<footer>`

---

## üì∏ Im√°genes

- Servidas desde CDN externo (ej: Cloudflare, Vercel assets)
- Usar `<Image />` de Next.js con `alt`, tama√±os expl√≠citos y optimizaci√≥n autom√°tica
- Activar `next.config.js` con dominios externos y formatos WebP

---

## üîç SEO T√©cnico

- Cada p√°gina debe definir: `<title>`, `<meta name="description">`, y metadatos OpenGraph
- URLs limpias y jer√°rquicas (`/blog/[slug]`, `/contacto`, etc.)
- Sitemap autom√°tico (`/sitemap.xml`) con rutas p√∫blicas
- Blog en `.md` con `frontmatter` estructurado: title, description, slug, tags, image
- Usar `<main>` y headings jer√°rquicos (`<h1>` ‚Üí `<h2>`, etc.) para mejorar el rastreo

---

## üß† Accesibilidad y rendimiento

- Todas las im√°genes con `loading="lazy"`
- Navegaci√≥n por teclado en formularios y enlaces
- Colores contrastados (m√≠nimo AA+ WCAG)
- Usar `rel="noopener noreferrer"` en enlaces externos
- Carga est√°tica (`SSG`) por defecto, evitar `SSR` salvo justificaci√≥n clara
- Formularios con validaci√≥n visual y funcional

---

## üõ†Ô∏è Regla Cursor

- Esta regla se aplica a todos los archivos en:  
  `frontend/**/*.{js,jsx,ts,tsx}`

- Todos los componentes deben crearse dentro de `/components/`
- Las p√°ginas p√∫blicas deben estar ubicadas dentro de `/app/`
- No se permite usar `lorem ipsum`: todos los textos deben estar definidos por dise√±o o por Markdown
- El c√≥digo debe mantenerse modular, legible y reutilizable
- Todos los cambios deben mantener compatibilidad con SEO, accesibilidad y mobile-first

---

## ‚úÖ Buenas pr√°cticas adicionales

- Evitar l√≥gica de negocio en componentes UI (delegar a hooks o servicios)
- Usar `headlessui`, `@radix-ui/react` o similares para accesibilidad avanzada
- Usar ESLint + Prettier para mantener coherencia de estilo
- Animaciones ligeras: usar `framer-motion` si se requiere transiciones suaves
- Toda navegaci√≥n interna debe usar `<Link />` de Next.js